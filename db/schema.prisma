// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------


enum MemberShipRole{
  OWNER
  ADMIN
  USER
}

enum GlobalRole{
  SUPERADMIN
  CUSTOMER
}

model School{
  id String @id @default(uuid())

  schoolName String

  teachers Teacher[]
  students Student[]
}

model Student{
  id String @id @default(uuid())

  schoolId String
  school School @relation(fields: [schoolId],references: [id])

  userId String? @unique
  user User? @relation()

  classId String?
  class Class? @relation(fields: [classId],references: [id])


  @@unique([schoolId,userId])

}

model Teacher{
  id String @id @default(uuid())
  role MemberShipRole @default(USER)

  schoolId String
  school School @relation(fields: [schoolId],references: [id])

  userId String?
  user User? @relation(fields: [userId],references: [id])

  invitedName String?
  invitedEmail String?

  classId String? @unique
  class Class? @relation()

  scheduleId String? @unique
  schedule TeacherSchedule? @relation()

  @@unique([schoolId,invitedEmail])

}

model Class{
  id String @id @default(cuid())
  className String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  scheduleDateTime DateTime

  teacherId String? @unique
  teacher Teacher? @relation(fields: [teacherId],references: [id])

  students Student[]

  schedules TeacherSchedule[]

}

model TeacherSchedule{
  id String @id @default(cuid())

  scheduleName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  
  teacherId String @unique
  teacher Teacher @relation(fields: [teacherId],references: [id])

  classes Class[]

}

model User {
  id             String      @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           GlobalRole @default(CUSTOMER)

  tokens   Token[]
  sessions Session[]
  memberShips Teacher[]

  studentId String? @unique
  student Student? @relation(fields: [studentId],references: [id])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
